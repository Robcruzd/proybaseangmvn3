# Maven package Java project Web App to Linux on Azure
# Build your Java project and deploy it to Azure as a Linux web app
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - master

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '9bdaa5b7-dd74-41a0-8785-63a9c4905a9f'

  # Web app name
  webAppName: 'proybaseangmvn3con'

  # Environment name
  environmentName: 'proybaseangmvn'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  containerRegistry: proybaseangmvn.azurecr.io
  dockerRegistryServiceConnection: 'a9711b6e-a907-4497-898a-98ba60a3c21e'
  imageRepository: proybaseangmvn3
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  NODE_VERSION: 16.17.0
  SPRING_OUTPUT_ANSI_ENABLED: NEVER
  SPRING_JPA_SHOW_SQL: false
  JHI_DISABLE_WEBPACK_LOGS: true
  NG_CLI_ANALYTICS: 'false'
  JHI_E2E_HEADLESS: true

stages:
  - stage: Test
    displayName: Test stage
    jobs:
      - job: MavenPackageAndTest
        displayName: Maven Package and Test
        pool:
          vmImage: $(vmImageName)

        steps:
          #----------------------------------------------------------------------
          # Install all tools and check configuration
          #----------------------------------------------------------------------
          - task: NodeTool@0
            inputs:
              versionSpec: $(NODE_VERSION)
            displayName: 'TOOLS: install Node.js'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt install ./google-chrome-stable_current_amd64.deb
            displayName: 'TOOLS: install Chrome'

          #----------------------------------------------------------------------
          # Tests
          #----------------------------------------------------------------------
          - task: Npm@1
            inputs:
              command: 'install'
            displayName: 'INSTALL: launch npm install'
          - script: chmod +x mvnw
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:backend:test'
            displayName: 'TESTS: backend'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: '$(Build.SourcesDirectory)/target/test-results'
            condition: succeededOrFailed()
            displayName: 'TESTS: publish test results'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:frontend:test'
            displayName: 'TESTS: frontend'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(Build.SourcesDirectory)/target/test-results/TESTS-results-jest.xml'
            condition: succeededOrFailed()
            displayName: 'TESTS: publish test results'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run java:jar:prod'
            displayName: 'TESTS: packaging'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:package'
            displayName: 'E2E: Package'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:prepare'
            displayName: 'E2E: Prepare'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:run'
            displayName: 'E2E: Run'
            env:
              CYPRESS_ENABLE_RECORD: false
          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: 'cypress-screenshots'
              targetPath: '$(Build.SourcesDirectory)/target/cypress/screenshots'
            condition: failed()
            displayName: 'E2E: Publish Cypress Screenshots'
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: ' run ci:e2e:teardown'
            displayName: 'E2E: Teardown'

  - stage: Build
    displayName: Build and package
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: './mvnw package -Pprod verify jib:build -Djib.to.image=proybaseangmvn.azurecr.io/proybaseangmvn3'
            displayName: 'Build and package the application'
          # - task: Docker@2
          #   displayName: Build and push an image to container registry
          #   inputs:
          #     command: buildAndPush
          #     repository: $(imageRepository)
          #     dockerfile: '**/Dockerfile'
          #     containerRegistry: $(dockerRegistryServiceConnection)
          #     tags: |
          #       $(tag)

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          ## Add the below snippet at the end of your pipeline
          - task: AzureWebAppContainer@1
            displayName: 'Azure Web App on Container Deploy'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              imageName: $(containerRegistry)/$(imageRepository):$(tag)
