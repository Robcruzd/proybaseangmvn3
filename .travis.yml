os:
  - linux
branches:
  only:
    - feature/travis-ci
services:
  - docker
language: node_js
node_js:
  - '16.17.0'
cache:
  directories:
    - node
    - node_modules
    - $HOME/.m2
env:
  global:
    - NODE_VERSION=16.17.0
    - JHI_JDK=17
    - SPRING_OUTPUT_ANSI_ENABLED=ALWAYS
    - SPRING_JPA_SHOW_SQL=false
    - JHI_DISABLE_WEBPACK_LOGS=true
    - NG_CLI_ANALYTICS="false"
    - MAVEN_USER_HOME=$HOME/.m2/repository/
    - CYPRESS_ENABLE_RECORD: false
    - AZURE_CLIENT_ID=ab795cd7-5b59-4d1d-afb2-fa04b04db278
    - AZURE_CLIENT_SECRET=I5K8Q~e14r-IQ9sVcSeWD7g1TzqGLm8zrX8Rjadh
    - AZURE_TENANT_ID=adce66e5-0a46-4c70-b26c-98866bb294ea
    - RESOURCE_GROUP=proybase
    - CONTAINER_REGISTRY_USERNAME=proybaseacr
    - CONTAINER_REGISTRY_PASSWORD=snhgVZobG1MvfOieAa/wU1ZVz/iDKi9p+yvQS+mVxr+ACRBLLENL
    - CONTAINER_REGISTRY=proybaseacr.azurecr.io
    - IMAGE_REPOSITORY=proybase_image
    - TAG=$TRAVIS_BUILD_NUMBER
    - CLUSTER_NAME=proybasecluster

stages:
  # - test
  - deploy

jobs:
  include:
    # - stage: test
    #   name: Tests
    #   before_script:
    #     - |
    #       echo '*** Using OpenJDK 17 by default'
    #       sudo add-apt-repository -y ppa:openjdk-r/ppa
    #       sudo apt-get update -q
    #       sudo apt-get install -y openjdk-17-jdk
    #       sudo apt-get install -y openjdk-17-jre-headless
    #       sudo update-java-alternatives -s java-1.17.0-openjdk-amd64
    #       export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
    #       export PATH=$PATH:$JAVA_HOME/bin
    #       java -version
    #     - sudo /etc/init.d/mysql stop
    #     - sudo /etc/init.d/postgresql stop
    #     - nvm install $NODE_VERSION
    #     - npm install -g npm
    #     - npm install
    #   script:
    #     - chmod +x mvnw
    #     - npm run ci:backend:test
    #     - npm run ci:frontend:test

    - stage: deploy
      name: Build, package and deploy
      services:
        - docker
      before_script:
        - |
          echo '*** Using OpenJDK 17 by default'
          sudo add-apt-repository -y ppa:openjdk-r/ppa
          sudo apt-get update -q
          sudo apt-get install -y openjdk-17-jdk
          sudo apt-get install -y openjdk-17-jre-headless
          sudo update-java-alternatives -s java-1.17.0-openjdk-amd64
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$PATH:$JAVA_HOME/bin
          java -version
        - sudo /etc/init.d/mysql stop
        - sudo /etc/init.d/postgresql stop
        - curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        - nvm install $NODE_VERSION
        - npm install -g npm
        - npm install
        - pwd
        - ls
        - echo "${CONTAINER_REGISTRY_PASSWORD}" | docker login --username ${CONTAINER_REGISTRY_USERNAME} --password-stdin ${CONTAINER_REGISTRY}
        - az login --service-principal -u ${AZURE_CLIENT_ID} -p ${AZURE_CLIENT_SECRET} --tenant ${AZURE_TENANT_ID}
      script:
        - ./mvnw package -Pprod verify jib:build -Djib.to.image=${CONTAINER_REGISTRY}/${IMAGE_REPOSITORY}:${TAG}
      deploy:
        provider: script
        script:
          - az webapp config container set --docker-custom-image-name ${CONTAINER_REGISTRY}/${IMAGE_REPOSITORY}:${TAG} --docker-registry-server-password ${CONTAINER_REGISTRY_PASSWORD} --docker-registry-server-url https://${CONTAINER_REGISTRY} --docker-registry-server-user ${CONTAINER_REGISTRY_USERNAME} --name proybaseappserforcon --resource-group ${RESOURCE_GROUP}
          # Set AKS context
          - az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${CLUSTER_NAME}
          # Deploy to AKS
          - kubectl apply -f deployment.yml -f service.yml
          - kubectl set image deployment/proybaseangmvn3 my-container=${CONTAINER_REGISTRY}/${IMAGE_REPOSITORY}:${TAG}
        on:
          branch: feature/travis-ci

notifications:
  webhooks:
    on_success: change # options: [always|never|change] default: always
    on_failure: always # options: [always|never|change] default: always
    on_start: false # default: false
