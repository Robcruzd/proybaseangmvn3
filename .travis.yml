os:
  - linux
branches:
  only:
    - feature/travis-ci
services:
  - docker
language: node_js
node_js:
  - '16.17.0'
cache:
  directories:
    - node
    - node_modules
    - $HOME/.m2
env:
  global:
    - NODE_VERSION=16.17.0
    - JHI_JDK=17
    - SPRING_OUTPUT_ANSI_ENABLED=ALWAYS
    - SPRING_JPA_SHOW_SQL=false
    - JHI_DISABLE_WEBPACK_LOGS=true
    - NG_CLI_ANALYTICS="false"
    - MAVEN_USER_HOME=$HOME/.m2/repository/
    - CYPRESS_ENABLE_RECORD: false
    - AZURE_CLIENT_ID=ab795cd7-5b59-4d1d-afb2-fa04b04db278
    - AZURE_CLIENT_SECRET=I5K8Q~e14r-IQ9sVcSeWD7g1TzqGLm8zrX8Rjadh
    - AZURE_TENANT_ID=adce66e5-0a46-4c70-b26c-98866bb294ea
    - RESOURCE_GROUP=proybase
    - CONTAINER_REGISTRY_USERNAME=proybaseacr
    - CONTAINER_REGISTRY_PASSWORD=snhgVZobG1MvfOieAa/wU1ZVz/iDKi9p+yvQS+mVxr+ACRBLLENL
    - CONTAINER_REGISTRY=proybaseacr.azurecr.io
    - IMAGE_REPOSITORY=proybase_image
    - TAG=$TRAVIS_BUILD_NUMBER

stages:
  # - build
  - deliver

jobs:
  include:
    # - stage: build
    #   name: Tests
    #   before_script:
    #     - |
    #       echo '*** Using OpenJDK 17 by default'
    #       sudo add-apt-repository -y ppa:openjdk-r/ppa
    #       sudo apt-get update -q
    #       sudo apt-get install -y openjdk-17-jdk
    #       sudo apt-get install -y openjdk-17-jre-headless
    #       sudo update-java-alternatives -s java-1.17.0-openjdk-amd64
    #       export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
    #       export PATH=$PATH:$JAVA_HOME/bin
    #       java -version
    #     - sudo /etc/init.d/mysql stop
    #     - sudo /etc/init.d/postgresql stop
    #     # - curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    #     - nvm install $NODE_VERSION
    #     - npm install -g npm
    #     - node -v
    #     - npm -v
    #     - npm install
    #   script:
    #     - chmod +x mvnw
    #     - npm run ci:backend:test
    #     - npm run ci:frontend:test
    # - npm run java:jar:prod

    - stage: deliver
      name: Build and package
      services:
        - docker
      before_script:
        - |
          echo '*** Using OpenJDK 17 by default'
          sudo add-apt-repository -y ppa:openjdk-r/ppa
          sudo apt-get update -q
          sudo apt-get install -y openjdk-17-jdk
          sudo apt-get install -y openjdk-17-jre-headless
          sudo update-java-alternatives -s java-1.17.0-openjdk-amd64
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export PATH=$PATH:$JAVA_HOME/bin
          java -version
        - sudo /etc/init.d/mysql stop
        - sudo /etc/init.d/postgresql stop
        - curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        - nvm install $NODE_VERSION
        - npm install -g npm
        - node -v
        - npm -v
        - npm install
        - echo "${CONTAINER_REGISTRY_PASSWORD}" | docker login --username ${CONTAINER_REGISTRY_USERNAME} --password-stdin ${CONTAINER_REGISTRY}
      script:
        - node -v
      deploy:
        provider: script
        script: |
          az webapp config container set --docker-custom-image-name proybaseacr.azurecr.io/proybase_image:44 --docker-registry-server-password snhgVZobG1MvfOieAa/wU1ZVz/iDKi9p+yvQS+mVxr+ACRBLLENL --docker-registry-server-url https://proybaseacr.azurecr.io --docker-registry-server-user proybaseacr --name proybaseappserforcon --resource-group proybase
        on:
          branch: feature/travis-ci

# az login --service-principal -u ab795cd7-5b59-4d1d-afb2-fa04b04db278 -p I5K8Q~e14r-IQ9sVcSeWD7g1TzqGLm8zrX8Rjadh --tenant adce66e5-0a46-4c70-b26c-98866bb294ea
#           az account set --subscription 8161c636-4f8c-4db8-b758-6fefca0524e6

# # Log into Azure
# az login --service-principal --username $AZURE_SP_USERNAME --password $AZURE_SP_PASSWORD --tenant $AZURE_SP_TENANT

# # Docker log into Azure Container Registry
# az acr login --name $ACR_NAME

# # Push container Azure Container Registry
# docker push $ACR_NAME.azurecr.io/$DOCKER_IMAGE_NAME:$TRAVIS_COMMIT

# # Obtain Docker credentials from Azure Container Registry
# ACR_PASSWORD=`az acr credential show --name $ACR_NAME | jq -r '.passwords[0].value'`
# ACR_USERNAME=`az acr credential show --name $ACR_NAME | jq -r '.username'`

# Deploy the container to Azure Web App
# az webapp config container set --docker-custom-image-name ${CONTAINER_REGISTRY}/${IMAGE_REPOSITORY}:${TAG} --docker-registry-server-password ${CONTAINER_REGISTRY_PASSWORD} --docker-registry-server-url https://${CONTAINER_REGISTRY} --docker-registry-server-user ${CONTAINER_REGISTRY_USERNAME} --name proybaseappserforcon --resource-group ${RESOURCE_GROUP}

# script:
#   - chmod +x mvnw
#   - npm run ci:backend:test
#   - npm run ci:frontend:test
#   - npm run java:jar:prod
#   # - npm run ci:e2e:package    el comando docker compose no funciona, da error
#   # - npm run ci:e2e:prepare
#   # - npm run ci:e2e:run
#   # - npm run ci:e2e:teardown
#   - az login --service-principal --username $AZURE_CLIENT_ID --password $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
#   - az webapp deploy --resource-group $RESOURCE_GROUP --name $WEBAPP_NAME --src-path $(find . -name "proy*.jar") --type jar --verbose

notifications:
  webhooks:
    on_success: change # options: [always|never|change] default: always
    on_failure: always # options: [always|never|change] default: always
    on_start: false # default: false

# - stage: deliver
#       name: Build and package
#       # os: linux
#       # language: java
#       # jdk: openjdk17
#       services:
#         - docker
#       before_script:
#         # - |
#         #   echo '*** Using OpenJDK 17 by default'
#         #   sudo add-apt-repository -y ppa:openjdk-r/ppa
#         #   sudo apt-get update -q
#         #   sudo apt-get install -y openjdk-17-jdk
#         #   sudo apt-get install -y openjdk-17-jre-headless
#         #   sudo update-java-alternatives -s java-1.17.0-openjdk-amd64
#         #   export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
#         #   export PATH=$PATH:$JAVA_HOME/bin
#         #   java -version
#         # - sudo /etc/init.d/mysql stop
#         # - sudo /etc/init.d/postgresql stop
#         # - curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
#         - nvm install $NODE_VERSION
#         - npm install -g npm
#         - node -v
#         - npm -v
#         - npm install
#         # - docker login --username ${CONTAINER_REGISTRY_USERNAME} --password ${CONTAINER_REGISTRY_PASSWORD} ${CONTAINER_REGISTRY}
#         - echo "${CONTAINER_REGISTRY_PASSWORD}" | docker login --username ${CONTAINER_REGISTRY_USERNAME} --password-stdin ${CONTAINER_REGISTRY}
#       script:
#         - node -v
#         # - ./mvnw package -Pprod verify jib:build -Djib.to.image=${CONTAINER_REGISTRY}/${IMAGE_REPOSITORY}:${TAG}
#       deploy:
#         provider: script
#         script: |
#           az webapp config container set --docker-custom-image-name ${CONTAINER_REGISTRY}/${IMAGE_REPOSITORY}:44 --docker-registry-server-password ${CONTAINER_REGISTRY_PASSWORD} --docker-registry-server-url https://${CONTAINER_REGISTRY} --docker-registry-server-user ${CONTAINER_REGISTRY_USERNAME} --name proybaseappserforcon --resource-group ${RESOURCE_GROUP}
#         on:
#           branch: feature/travis-ci
